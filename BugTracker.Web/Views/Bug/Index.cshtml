@model PagedListResult<BugTracker.Shared.Dtos.BugReportDto>

@{
    ViewData["Title"] = "Index";
    var token = Context.Session.GetString("AccessToken");
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}
<h1>Index</h1>

<div style="text-align:end">
    <p>
        <button class="btn btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
            Filter
        </button>
        <span></span>
        <a class="btn btn-primary" asp-action="Create">Add Bug</a>
    </p>
</div>

<div class="collapse" id="collapseExample">
    <div class="card card-body">
        <h4>Search Bug Reports</h4>
        <div class="row">
            <div class="col-md-3 mb-2">
                <input type="number" id="searchBugNo" class="form-control" placeholder="Search by Bug No" />
            </div>
            <div class="col-md-3 mb-2">
                <select id="userDropdown" class="form-select">
                    <option value="">Choose Assignee</option>
                    @foreach (var user in ViewBag.Users)
                    {
                        <option value="@user.Value">@user.Text</option>
                    }
                </select>
            </div>
        </div>
        <div style="text-align:start">
            <button onclick="getBugs()" class="btn btn-primary">Search</button>
            <button onclick="clearSearch()" class="btn btn-secondary">Clear</button>
        </div>
    </div>
</div>

<table id="bugTable" class="table">
    <thead>
        <tr>
            <th>Bug No</th>
            <th>Title</th>
            <th>Description</th>
            <th>Severity</th>
            <th>Status</th>
            <th>Reproduction Steps</th>
            <th>Assigne</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.BugNo)</td>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => item.Severity)</td>
                <td>@Html.DisplayFor(modelItem => item.Status)</td>
                <td>@Html.DisplayFor(modelItem => item.ReproductionSteps)</td>
                <td>@Html.DisplayFor(modelItem => item.UserName)</td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { item.Id }, new { @class = "btn btn-success btn-sm" })

                    @Html.ActionLink("Delete", "Delete", new { item.Id }, new { @class = "btn btn-danger btn-sm", onclick = "return confirm('Are you sure you want to delete this item?');" })
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    const token = '@Html.Raw(token)'; // Pass the token to JavaScript
    const baseUrl = 'https://localhost:7099/api/';
    async function getBugs() {
        const searchBugNo = document.getElementById('searchBugNo').value;
        const selectedUserId = document.getElementById('userDropdown').value;

        let filters = [];

        if (searchBugNo) {
            filters.push('BugNo==' + searchBugNo);
        }
        if (selectedUserId) {
            filters.push(`UserId@@=${selectedUserId}`);
        }

        const filtersString = filters.join(',');

        const url = `${baseUrl}bugreport/GetPagedBugReport?Filters=${filtersString}`;

        try {
            //call api
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            if (!response.ok) throw new Error('Network response was not ok');

            const data = await response.json();

            // populate the table after search
            populateBugTable(data);
        } catch (error) {
            console.error('Fetch error:', error);
        }
    }

    function populateBugTable(data) {
        const tbody = document.querySelector('#bugTable tbody');
        tbody.innerHTML = ''; // Clear existing rows
        data.data.items.forEach(item => {
            const row = `
                                <tr>
                                    <td>${item.bugNo}</td>
                                    <td>${item.title}</td>
                                    <td>${item.description}</td>
                                    <td>${item.severity}</td>
                                    <td>${item.status}</td>
                                    <td>${item.reproductionSteps}</td>
                                    <td>${item.userName}</td>
                                    <td>
                                        <a href="/bugs/edit/${item.id}" class="btn btn-success btn-sm">Edit</a>
                                        <a href="/bugs/delete/${item.id}" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this item?');">Delete</a>
                                    </td>
                                </tr>`;
            tbody.innerHTML += row;
        });
    }

    function clearSearch() {
        document.getElementById('searchBugNo').value = ''; 
        document.getElementById('userDropdown').value = ''; 
        getBugs(); 
    }
</script>